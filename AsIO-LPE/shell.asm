include listing.inc

PUBLIC	_NtCurrentTeb
PUBLIC	_NtCurrentPeb
PUBLIC	_GetDLLBase
PUBLIC	_GetExport
PUBLIC	_main
; Function compile flags: /Odtp
_TEXT	SEGMENT

_msg_content$ = -128					; size = 26
_K32Name$ = -100					; size = 26
_user32_dll_name$ = -72					; size = 22
_load_lib_name$ = -48					; size = 13
_msg_title$ = -32					; size = 12
_message_box_name$ = -20				; size = 12
_MsgBoxW$ = -8						; size = 4
_LoadLib$ = -4						; size = 4
_main	PROC
; File D:\Projects\AsIO-LPE\AsIO-LPE\shell.c
; Line 88
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
; Line 89
	mov	eax, 107				; 0000006bH
	mov	WORD PTR _K32Name$[ebp], ax
	mov	ecx, 101				; 00000065H
	mov	WORD PTR _K32Name$[ebp+2], cx
	mov	edx, 114				; 00000072H
	mov	WORD PTR _K32Name$[ebp+4], dx
	mov	eax, 110				; 0000006eH
	mov	WORD PTR _K32Name$[ebp+6], ax
	mov	ecx, 101				; 00000065H
	mov	WORD PTR _K32Name$[ebp+8], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _K32Name$[ebp+10], dx
	mov	eax, 51					; 00000033H
	mov	WORD PTR _K32Name$[ebp+12], ax
	mov	ecx, 50					; 00000032H
	mov	WORD PTR _K32Name$[ebp+14], cx
	mov	edx, 46					; 0000002eH
	mov	WORD PTR _K32Name$[ebp+16], dx
	mov	eax, 100				; 00000064H
	mov	WORD PTR _K32Name$[ebp+18], ax
	mov	ecx, 108				; 0000006cH
	mov	WORD PTR _K32Name$[ebp+20], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _K32Name$[ebp+22], dx
	xor	eax, eax
	mov	WORD PTR _K32Name$[ebp+24], ax
; Line 90
	mov	ecx, 117				; 00000075H
	mov	WORD PTR _user32_dll_name$[ebp], cx
	mov	edx, 115				; 00000073H
	mov	WORD PTR _user32_dll_name$[ebp+2], dx
	mov	eax, 101				; 00000065H
	mov	WORD PTR _user32_dll_name$[ebp+4], ax
	mov	ecx, 114				; 00000072H
	mov	WORD PTR _user32_dll_name$[ebp+6], cx
	mov	edx, 51					; 00000033H
	mov	WORD PTR _user32_dll_name$[ebp+8], dx
	mov	eax, 50					; 00000032H
	mov	WORD PTR _user32_dll_name$[ebp+10], ax
	mov	ecx, 46					; 0000002eH
	mov	WORD PTR _user32_dll_name$[ebp+12], cx
	mov	edx, 100				; 00000064H
	mov	WORD PTR _user32_dll_name$[ebp+14], dx
	mov	eax, 108				; 0000006cH
	mov	WORD PTR _user32_dll_name$[ebp+16], ax
	mov	ecx, 108				; 0000006cH
	mov	WORD PTR _user32_dll_name$[ebp+18], cx
	xor	edx, edx
	mov	WORD PTR _user32_dll_name$[ebp+20], dx
; Line 92
	mov	BYTE PTR _message_box_name$[ebp], 77	; 0000004dH
	mov	BYTE PTR _message_box_name$[ebp+1], 101	; 00000065H
	mov	BYTE PTR _message_box_name$[ebp+2], 115	; 00000073H
	mov	BYTE PTR _message_box_name$[ebp+3], 115	; 00000073H
	mov	BYTE PTR _message_box_name$[ebp+4], 97	; 00000061H
	mov	BYTE PTR _message_box_name$[ebp+5], 103	; 00000067H
	mov	BYTE PTR _message_box_name$[ebp+6], 101	; 00000065H
	mov	BYTE PTR _message_box_name$[ebp+7], 66	; 00000042H
	mov	BYTE PTR _message_box_name$[ebp+8], 111	; 0000006fH
	mov	BYTE PTR _message_box_name$[ebp+9], 120	; 00000078H
	mov	BYTE PTR _message_box_name$[ebp+10], 87	; 00000057H
	mov	BYTE PTR _message_box_name$[ebp+11], 0
; Line 93
	mov	BYTE PTR _load_lib_name$[ebp], 76	; 0000004cH
	mov	BYTE PTR _load_lib_name$[ebp+1], 111	; 0000006fH
	mov	BYTE PTR _load_lib_name$[ebp+2], 97	; 00000061H
	mov	BYTE PTR _load_lib_name$[ebp+3], 100	; 00000064H
	mov	BYTE PTR _load_lib_name$[ebp+4], 76	; 0000004cH
	mov	BYTE PTR _load_lib_name$[ebp+5], 105	; 00000069H
	mov	BYTE PTR _load_lib_name$[ebp+6], 98	; 00000062H
	mov	BYTE PTR _load_lib_name$[ebp+7], 114	; 00000072H
	mov	BYTE PTR _load_lib_name$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _load_lib_name$[ebp+9], 114	; 00000072H
	mov	BYTE PTR _load_lib_name$[ebp+10], 121	; 00000079H
	mov	BYTE PTR _load_lib_name$[ebp+11], 87	; 00000057H
	mov	BYTE PTR _load_lib_name$[ebp+12], 0
; Line 95
	mov	eax, 72					; 00000048H
	mov	WORD PTR _msg_content$[ebp], ax
	mov	ecx, 101				; 00000065H
	mov	WORD PTR _msg_content$[ebp+2], cx
	mov	edx, 108				; 0000006cH
	mov	WORD PTR _msg_content$[ebp+4], dx
	mov	eax, 108				; 0000006cH
	mov	WORD PTR _msg_content$[ebp+6], ax
	mov	ecx, 111				; 0000006fH
	mov	WORD PTR _msg_content$[ebp+8], cx
	mov	edx, 32					; 00000020H
	mov	WORD PTR _msg_content$[ebp+10], dx
	mov	eax, 87					; 00000057H
	mov	WORD PTR _msg_content$[ebp+12], ax
	mov	ecx, 111				; 0000006fH
	mov	WORD PTR _msg_content$[ebp+14], cx
	mov	edx, 114				; 00000072H
	mov	WORD PTR _msg_content$[ebp+16], dx
	mov	eax, 108				; 0000006cH
	mov	WORD PTR _msg_content$[ebp+18], ax
	mov	ecx, 100				; 00000064H
	mov	WORD PTR _msg_content$[ebp+20], cx
	mov	edx, 33					; 00000021H
	mov	WORD PTR _msg_content$[ebp+22], dx
	xor	eax, eax
	mov	WORD PTR _msg_content$[ebp+24], ax
; Line 96
	mov	ecx, 68					; 00000044H
	mov	WORD PTR _msg_title$[ebp], cx
	mov	edx, 101				; 00000065H
	mov	WORD PTR _msg_title$[ebp+2], dx
	mov	eax, 109				; 0000006dH
	mov	WORD PTR _msg_title$[ebp+4], ax
	mov	ecx, 111				; 0000006fH
	mov	WORD PTR _msg_title$[ebp+6], cx
	mov	edx, 33					; 00000021H
	mov	WORD PTR _msg_title$[ebp+8], dx
	xor	eax, eax
	mov	WORD PTR _msg_title$[ebp+10], ax
; Line 97
	lea	ecx, DWORD PTR _load_lib_name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _K32Name$[ebp]
	push	edx
	call	_GetDLLBase
	add	esp, 4
	push	eax
	call	_GetExport
	add	esp, 8
	mov	DWORD PTR _LoadLib$[ebp], eax
; Line 99
	lea	eax, DWORD PTR _user32_dll_name$[ebp]
	push	eax
	call	DWORD PTR _LoadLib$[ebp]
	add	esp, 4
; Line 101
	lea	ecx, DWORD PTR _message_box_name$[ebp]
	push	ecx
	lea	edx, DWORD PTR _user32_dll_name$[ebp]
	push	edx
	call	_GetDLLBase
	add	esp, 4
	push	eax
	call	_GetExport
	add	esp, 8
	mov	DWORD PTR _MsgBoxW$[ebp], eax
; Line 102
	push	0
	lea	eax, DWORD PTR _msg_title$[ebp]
	push	eax
	lea	ecx, DWORD PTR _msg_content$[ebp]
	push	ecx
	push	0
	call	DWORD PTR _MsgBoxW$[ebp]
	add	esp, 16					; 00000010H
; Line 104
	xor	eax, eax
; Line 105
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _GetExport
_TEXT	SEGMENT
_func$1 = -40						; size = 4
_Functions$ = -36					; size = 4
_Ordinals$ = -32					; size = 4
_Names$ = -28						; size = 4
_NtHeader$ = -24					; size = 4
_name$2 = -20						; size = 4
_ExportDir$ = -16					; size = 4
_i$3 = -12						; size = 4
_k$4 = -8						; size = 4
_DosHeader$ = -4					; size = 4
_image$ = 8						; size = 4
_fname$ = 12						; size = 4
_GetExport PROC						; COMDAT
; File D:\Projects\AsIO-LPE\AsIO-LPE\shell.c
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 57
	mov	eax, DWORD PTR _image$[ebp]
	mov	DWORD PTR _DosHeader$[ebp], eax
; Line 58
	mov	ecx, DWORD PTR _DosHeader$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 23117				; 00005a4dH
	je	SHORT $LN8@GetExport
; Line 59
	xor	eax, eax
	jmp	$LN1@GetExport
$LN8@GetExport:
; Line 61
	mov	eax, DWORD PTR _DosHeader$[ebp]
	mov	ecx, DWORD PTR _DosHeader$[ebp]
	add	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _NtHeader$[ebp], ecx
; Line 62
	mov	edx, DWORD PTR _NtHeader$[ebp]
	cmp	DWORD PTR [edx], 17744			; 00004550H
	je	SHORT $LN9@GetExport
; Line 63
	xor	eax, eax
	jmp	$LN1@GetExport
$LN9@GetExport:
; Line 65
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _NtHeader$[ebp]
	mov	eax, DWORD PTR _DosHeader$[ebp]
	add	eax, DWORD PTR [edx+ecx+120]
	mov	DWORD PTR _ExportDir$[ebp], eax
; Line 67
	mov	eax, DWORD PTR _DosHeader$[ebp]
	cdq
	mov	ecx, DWORD PTR _ExportDir$[ebp]
	add	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _Names$[ebp], eax
; Line 68
	mov	eax, DWORD PTR _DosHeader$[ebp]
	cdq
	mov	edx, DWORD PTR _ExportDir$[ebp]
	add	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _Functions$[ebp], eax
; Line 69
	mov	eax, DWORD PTR _DosHeader$[ebp]
	cdq
	mov	ecx, DWORD PTR _ExportDir$[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _Ordinals$[ebp], eax
; Line 71
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@GetExport
$LN2@GetExport:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN4@GetExport:
	mov	eax, DWORD PTR _ExportDir$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	$LN3@GetExport
; Line 73
	mov	eax, DWORD PTR _DosHeader$[ebp]
	cdq
	mov	edx, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _Names$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _name$2[ebp], eax
; Line 74
	mov	eax, DWORD PTR _DosHeader$[ebp]
	cdq
	mov	edx, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _Ordinals$[ebp]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _Functions$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _func$1[ebp], eax
; Line 76
	mov	DWORD PTR _k$4[ebp], 0
; Line 77
	mov	DWORD PTR _k$4[ebp], 0
	jmp	SHORT $LN7@GetExport
$LN5@GetExport:
	mov	edx, DWORD PTR _k$4[ebp]
	add	edx, 1
	mov	DWORD PTR _k$4[ebp], edx
$LN7@GetExport:
	mov	eax, DWORD PTR _fname$[ebp]
	add	eax, DWORD PTR _k$4[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@GetExport
	mov	edx, DWORD PTR _name$2[ebp]
	add	edx, DWORD PTR _k$4[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN6@GetExport
; Line 78
	mov	ecx, DWORD PTR _fname$[ebp]
	add	ecx, DWORD PTR _k$4[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _name$2[ebp]
	add	eax, DWORD PTR _k$4[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN10@GetExport
	jmp	SHORT $LN6@GetExport
$LN10@GetExport:
	jmp	SHORT $LN5@GetExport
$LN6@GetExport:
; Line 80
	mov	edx, DWORD PTR _fname$[ebp]
	add	edx, DWORD PTR _k$4[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN11@GetExport
	mov	ecx, DWORD PTR _name$2[ebp]
	add	ecx, DWORD PTR _k$4[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN11@GetExport
; Line 81
	mov	eax, DWORD PTR _func$1[ebp]
	jmp	SHORT $LN1@GetExport
$LN11@GetExport:
; Line 82
	jmp	$LN2@GetExport
$LN3@GetExport:
; Line 84
	xor	eax, eax
$LN1@GetExport:
; Line 85
	mov	esp, ebp
	pop	ebp
	ret	0
_GetExport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _GetDLLBase
_TEXT	SEGMENT
_Head$ = -52						; size = 8
_peb$ = -44						; size = 4
_LdrEntry$1 = -40					; size = 4
tv155 = -36						; size = 4
tv149 = -32						; size = 4
tv133 = -28						; size = 4
tv95 = -24						; size = 4
_Entry$2 = -20						; size = 4
_name$3 = -16						; size = 4
_i$4 = -12						; size = 4
_c2$5 = -8						; size = 2
_c1$6 = -4						; size = 2
_image$ = 8						; size = 4
_GetDLLBase PROC					; COMDAT
; File D:\Projects\AsIO-LPE\AsIO-LPE\shell.c
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
; Line 29
	call	_NtCurrentPeb
	mov	DWORD PTR _peb$[ebp], eax
; Line 31
	mov	eax, DWORD PTR _peb$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _Head$[ebp], edx
	mov	DWORD PTR _Head$[ebp+4], eax
; Line 33
	mov	ecx, DWORD PTR _Head$[ebp]
	mov	DWORD PTR _Entry$2[ebp], ecx
	jmp	SHORT $LN4@GetDLLBase
$LN2@GetDLLBase:
	mov	edx, DWORD PTR _Entry$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _Entry$2[ebp], eax
$LN4@GetDLLBase:
	mov	ecx, DWORD PTR _Entry$2[ebp]
	lea	edx, DWORD PTR _Head$[ebp]
	cmp	DWORD PTR [ecx], edx
	je	$LN3@GetDLLBase
; Line 35
	mov	eax, DWORD PTR _Entry$2[ebp]
	mov	DWORD PTR _LdrEntry$1[ebp], eax
; Line 36
	mov	ecx, DWORD PTR _LdrEntry$1[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _name$3[ebp], edx
; Line 38
	mov	DWORD PTR _i$4[ebp], 0
; Line 39
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN7@GetDLLBase
$LN5@GetDLLBase:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN7@GetDLLBase:
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	$LN6@GetDLLBase
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _name$3[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	$LN6@GetDLLBase
; Line 43
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN11@GetDLLBase
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@GetDLLBase
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	mov	ax, WORD PTR tv95[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	movzx	ecx, WORD PTR tv95[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	jmp	SHORT $LN12@GetDLLBase
$LN11@GetDLLBase:
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _image$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	DWORD PTR tv133[ebp], ecx
$LN12@GetDLLBase:
	mov	dx, WORD PTR tv133[ebp]
	mov	WORD PTR _c1$6[ebp], dx
; Line 44
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _name$3[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 90					; 0000005aH
	jg	SHORT $LN13@GetDLLBase
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _name$3[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN13@GetDLLBase
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _name$3[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, 32					; 00000020H
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _name$3[ebp]
	mov	dx, WORD PTR tv149[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	movzx	eax, WORD PTR tv149[ebp]
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN14@GetDLLBase
$LN13@GetDLLBase:
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _name$3[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR tv155[ebp], eax
$LN14@GetDLLBase:
	mov	cx, WORD PTR tv155[ebp]
	mov	WORD PTR _c2$5[ebp], cx
; Line 45
	movzx	edx, WORD PTR _c1$6[ebp]
	movzx	eax, WORD PTR _c2$5[ebp]
	cmp	edx, eax
	je	SHORT $LN8@GetDLLBase
	jmp	SHORT $LN6@GetDLLBase
$LN8@GetDLLBase:
; Line 46
	jmp	$LN5@GetDLLBase
$LN6@GetDLLBase:
; Line 48
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _image$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	jne	SHORT $LN9@GetDLLBase
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _name$3[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	jne	SHORT $LN9@GetDLLBase
; Line 49
	mov	ecx, DWORD PTR _LdrEntry$1[ebp]
	mov	eax, DWORD PTR [ecx+24]
	jmp	SHORT $LN1@GetDLLBase
$LN9@GetDLLBase:
; Line 50
	jmp	$LN2@GetDLLBase
$LN3@GetDLLBase:
; Line 52
	xor	eax, eax
$LN1@GetDLLBase:
; Line 53
	mov	esp, ebp
	pop	ebp
	ret	0
_GetDLLBase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _NtCurrentPeb
_TEXT	SEGMENT
_NtCurrentPeb PROC					; COMDAT
; File D:\Projects\AsIO-LPE\AsIO-LPE\ntdef.h
; Line 5790
	push	ebp
	mov	ebp, esp
	call	_NtCurrentTeb
	mov	eax, DWORD PTR [eax+48]
	pop	ebp
	ret	0
_NtCurrentPeb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _NtCurrentTeb
_TEXT	SEGMENT
_NtCurrentTeb PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\um\winnt.h
; Line 24510
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:[24]
	pop	ebp
	ret	0
_NtCurrentTeb ENDP
_TEXT	ENDS
END
